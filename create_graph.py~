'''
Created on Fri Apr 12 05:03:26 2019

Author(s): Shahan Ali Memon
<samemon@cs.cmu.edu>

Instructor: Kathleen Carley

Description: This is the file
that will initialize different agents
based on a given edge and node list file 
and create a graph based on that.
'''

import networkx as nx
import csv
import agents
import numpy as np
import random
random.seed(150)
import sys

belief_chart = []

'''
Computing super-spreadness for undirected graph
'''

all_messages = []

def compute_super_spreadness(edges):
	nodes_to_ss = {}
	for edge in edges:
		f = edge[0]
		t = edge[1]
		if(f in nodes_to_ss.keys()):
			nodes_to_ss[f] += 1
		else:
			nodes_to_ss[f] = 1
		if(t in nodes_to_ss.keys()):
			nodes_to_ss[t] += 1
		else:
			nodes_to_ss[t] = 1

	return nodes_to_ss


def get_top_follower_messages(agent):
	global all_messages
	follower_messages = []
	followers = agent.followers
	
	for message in all_messages:
		if(message.messenger in followers):
			follower_messages.append((message.time,message))

	# Now let's sort by date and return top 10
	tuple_messages = sorted(follower_messages, key=lambda x: x[1],reverse=True)[:10]
	return list(map(lambda (a,b): b, tuple_messages))

# Let us first read the graph file in terms of nodes and edges
nodes = map(lambda l: l.rstrip().split(","), open("nodes_er_close.ctl").readlines())
edges = map(lambda l: l.rstrip().split(","), open("edges_er_far.ctl").readlines())

def update_my_friends(agent):
	my_followers = agent.followers
	for follower in my_followers:
		my_belief = agent.belief
		follower_belief = follower.belief
		if((my_belief > 0 and follower_belief < 0) or (my_belief < 0 and follower_belief > 0)):
			if(abs(my_belief) - abs(follower_belief) < 0.5):
				agent.delete_follower(follower)
				follower.delete_follower(agent)

# Now initialize agents

all_agents = []


node_to_ss = compute_super_spreadness(edges)

for node in nodes:
	name = node[0]
	belief = int(node[1])
	ss = 0
	if(name in node_to_ss.keys()):
		ss = node_to_ss[name]
	ai = agents.User(name,belief, ss, 0, [])
	all_agents.append(ai)


# Now that we have initialized agents.. let's add followers and following

for edge in edges:
	f = int(edge[0])
	t = int(edge[1])
	all_agents[f].followers.append(all_agents[t])
	all_agents[t].followers.append(all_agents[f])

# Now that we have initialized connections.. let's use FJ model to update beliefs
probability_dist = []
total_SS = 0

# Computing total superspreadness
for agent in all_agents:
	total_SS += agent.superspreadness

print(len(all_agents))

for agent in all_agents:
	
	followers = agent.followers
	W = []
	Yt_1 = []

	for follower in followers:
		W.append(follower.superspreadness)
		Yt_1.append(follower.belief)

	Wnorm = np.array(W)/total_SS
	Yt_1 = np.array(Yt_1)

	agent.belief = 0.5 * agent.belief + 0.5 * (np.dot(Wnorm, Yt_1))

	agent.activity = agent.superspreadness * 1.0/total_SS

	probability_dist.append(agent.activity)


# Now based on the activity of each agent, we randomly pick an agent
for i in range(10000):
	agent_index = np.random.choice(np.arange(0, 50), p=probability_dist)
	curr_agent = all_agents[agent_index]
	mi = agents.Message(curr_agent,[])
	all_messages.append(mi)



# Let us first initialize messages based on each users activity 
for i in range(1000):
	# Choosing a random agent
	agent_index = np.random.choice(np.arange(0, 50), p=probability_dist)
	# Who is the chosen one?
	curr_agent = all_agents[agent_index]

	# Beronoulli trial
	view_or_post = random.randint(0,1)
	# 0 == view... 1 == post
	if(view_or_post == 0):
		# Let's look at messages of all followers
		#print("Agent " + str(agent_index)+" viewing messages")
		# Getting top 10 messages
		top_follower_messages = get_top_follower_messages(curr_agent)
		# Getting bernoulli trial for tweet or retweet
		tweet_or_retweet = random.randint(0,1)

		if(tweet_or_retweet == 0):
			# That means create a new tweet
			# Because we viewed.. we need to write a message about what we saw
			pass
			# It already has this person's superspreadness as influence
			# We need to figure out what will be the influence of th

		if(tweet_or_retweet == 0 or tweet_or_retweet == 1):
			#print("Agent " + str(agent_index)+" retweeting")
			# That means retweet any of top 10 based on influence-- so no creation
			# Let us figure out which message it liked/retweeted
			full_influence = 0
			message_prob_dist = []
			for message in top_follower_messages:
				full_influence += message.influence
				message_prob_dist.append(message.influence*1.0)

			if(full_influence != 0):

				message_prob_dist = np.array(message_prob_dist)/full_influence
				#print(message_prob_dist)
				message_index = np.random.choice(np.arange(0, len(message_prob_dist)), p=message_prob_dist)
				# Now we need to update beliefs.
				curr_agent.belief = 0.5 * curr_agent.belief + 0.4 * top_follower_messages[message_index].messenger.belief + 0.1 * top_follower_messages[message_index].influence
				top_follower_messages[message_index].add_influence(curr_agent.superspreadness)
				# Now we need to update friends


				# Let us update friends if the difference in beliefs is greater than 2
				update_my_friends(curr_agent)

			else:
				# There are no messages..
				pass
	else:
		#print("Agent " + str(agent_index)+" posting")
		# That means post
		# Let's create a new post
		mi = agents.Message(curr_agent,[])
		all_messages.append(mi)

	all_beliefs_now = 0
	for agent in all_agents:
		all_beliefs_now += agent.belief
	belief_chart.append(all_beliefs_now)

# Let's print all beliefs
for agent in all_agents:
	print(agent.belief)

print(belief_chart)

# Now let's see how the graph looks
nodes = []
edges = []

for agent in all_agents:
	nodes.append(agent.id)
	for follower in agent.followers:
		edges.append((agent.id,follower.id))


fout = open("result_edges_far.ctl", "w")
for edge in edges:
	fout.write(str(edge[0]) + ","+ str(edge[1]) + "\n")





